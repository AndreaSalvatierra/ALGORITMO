#include "stdafx.h"
#include "conio.h"
#include <iostream>
#include <string>
#include "math.h"
#include "stdlib.h"
#define TAM 100

using namespace std;

void cargar_vector(int A[], int n);
void cargar_vectors(string nombre[], int n);
void mostrar_vector(int A[], int n);
void ordenar_vector(int A[], int n);
int busqueda_binaria(int A[], int n, int clave);
void arrays_paralelos(string nombre[], int nota[], int n);
void mostrar_paralelos(string nombre[], int nota[], int n);
void ordenar_vector(int A[], int n);

void main ()
{
	int opcion, n,z, sol, a,b, A[TAM],clave;
	string nombre[TAM];

	do
	{
		cout<<"1 . Cargar Vector Entero \n";
		cout<<"2 . Cargar Vector String \n";
		cout<<"3 . Mostrar Vector Entero \n";
		cout<<"4 . Clasificar Vector Paralelo \n";
		cout<<"5 . Mostrar Vector Paralelo \n";
		cout<<"6 . Busqueda Binaria \n";
		cout<<"7 . Clasificacion por insercion \n";
		cout<<"0 . Salir\n";
		cout<<"Opcion: ";
		cin>>opcion;

		switch (opcion)
		{
		case 1: do {
					cout<<"ingrese el numero de elementos: ";
					cin>>n;
				}
				while ((n>TAM) || (n<0));
				cargar_vector(A,n);
				getch(); break;

		case 2: do {
					cout<<"ingrese el numero de elementos : ";
					cin>>n;
				}
				while ((n>TAM) || (n<0));
				cargar_vectors(nombre,n);
				getch(); break;

		case 3: 
				mostrar_vector(A,n);
				getch(); break;

		case 4: 
				arrays_paralelos(nombre, A, n);
				getch(); break;

		case 5: 
				mostrar_paralelos(nombre, A, n);
				getch(); break;
				
		case 6:
			    cout<<"Ingrese el numero que desea buscar: ";
				cin>>clave;
				z=busqueda_binaria(A,n,clave);
				if(z==-1)
					cout<<"No existe: ";
				else
					cout<<"El dato esta en la posicion: "<<z<<"\t"<<A[z];
				getch(); break;
		case 7:
                do {
					cout<<"Ingrese el numero de elementos: ";
					cin>>n;
				   }
				while ((n>TAM) || (n<0));
				cargar_vector(A,n);                 
 				ordenar_vector(A, n);
				getch(); break;
			   
				
		case 0:
				cout<<"Fin del programa";
				getch(); break;

		default:
				cout<<"opcion invalida :";
				getch(); break;

		}
		system("cls");
	}while (opcion!=0);
}

void cargar_vector(int A[], int n)
{
	for (int i=0; i<n; i++)
	{
		cout<<"A["<<i<<"] = ";
		cin>>A[i];
	}
}

void cargar_vectors(string nombre[], int n)
{
	cin.ignore();
	for (int i=0; i<n; i++)
	{
		cout<<"nombre["<<i<<"] = ";
		getline(cin, nombre[i]);
	}
}

void mostrar_vector(int A[], int n)
{
	for (int i=0; i<n; i++)
	{
		cout<<"A["<<i<<"] = "<<A[i]<<endl;
	}
}

void arrays_paralelos(string nombre[], int nota[], int n)
{
	int aux;
	string auxs;
	for (int i=0; i< n-1; i++)
		for (int j=i+1; j<n; j++)
			if (nombre[i] > nombre[j])
			{
				aux=nota[j];
				nota[j]=nota[i];
				nota[i]=aux;
				auxs=nombre[j];
				nombre[j]=nombre[i];
				nombre[i]=auxs;

			}
}

void mostrar_paralelos(string nombre[], int nota[], int n)
{
	cout<<"No. Nombre y Apellido  Nota"<<endl;
	cout<<"ªªªªªªªªªªªªªªªªªªªªªªªªªªª"<<endl;
	for (int i=0; i<n; i++)
		cout<<i+1<<"\t"<<nombre[i]<<"\t\t"<<nota[i]<<endl;
}
int busqueda_binaria(int A[], int n, int clave)
{
  int fin =-1,ini = 0,medio;
  while (ini <= fin)
    {
      medio = (fin + ini)/2;
      if (A[medio] == clave)
         return medio;
      else
         if (clave< A[medio])
            fin=medio-1;
         else
            ini=medio+1;
    }
  return -1;
}
void ordenar_vector(int A[], int n)
{
	int aux;
		for(int i=0;i<n;i++)
			for(int j=i+1;j<n;j++)
		if(A[j]<A[i])
          {aux=A[i];
		   A[i]=A[j];
		   A[j]=aux;
		  
}
}
